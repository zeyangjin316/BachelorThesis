import numpy as np
import logging
import pandas as pd
from scipy.special import erfinv
from tqdm import tqdm

logger = logging.getLogger(__name__)

class CopulaTransformer:
    @staticmethod
    def to_gaussian_input(test_set, uv_samples, days):
        """
        Compute the Gaussian copula input matrix from univariate forecast samples and observed test data.

        For each test day and symbol:
        - The observed return X_{d,h} is taken from the test set.
        - The empirical CDF F_{d,h} is estimated using univariate forecast samples: uv_samples[symbol][day].
        - The PIT value u_{d,h} = F_{d,h}(X_{d,h}) is computed as the fraction of samples ≤ X_{d,h}.
        - The PIT value is then transformed to standard Gaussian space: Z_{d,h} = Φ⁻¹(u_{d,h}).

        Parameters
        ----------
        test_set : pd.DataFrame
            DataFrame containing the true observed values.
            Must include at least the columns:
                - 'date' (datetime),
                - 'sym_root' (symbol),
                - 'ret_crsp' (realized return value to be transformed).

        uv_samples : dict[str, dict[pd.Timestamp, np.ndarray]]
            Nested dictionary of forecast samples generated by the univariate forecaster.

            Structure:
                {
                    'AAPL': {
                        Timestamp('2022-11-14'): np.ndarray(shape=(n_samples,)),
                        Timestamp('2022-11-15'): np.ndarray(shape=(n_samples,)),
                        ...
                    },
                    'MSFT': {
                        Timestamp('2022-11-14'): np.ndarray(shape=(n_samples,)),
                        ...
                    },
                    ...
                }

            Each array represents forecast samples for a given symbol on a specific test day.

        days : list of pd.Timestamp or str
            List of dates to compute the copula input for.
            Only data for these dates is processed and returned.

        Returns
        -------
        pd.DataFrame
            Gaussian copula input matrix where:
                - Each row corresponds to a test date,
                - Each column corresponds to a symbol,
                - Each value Z_{d,h} = Φ⁻¹(u_{d,h}) is the Gaussianized PIT for that day and symbol.

            Columns with only missing values (e.g., due to failed sample generation) are dropped.

        Notes
        -----
        - This function outputs one scalar Z_{d,h} per symbol per day.
        - The resulting matrix is used as input for copula model fitting (e.g., Gaussian copula).
        - PIT values are clipped to avoid infinities at the tails of Φ⁻¹.
        """
        logger.info("Calculating Gaussian copula input matrix")
        matrix = []

        for day in tqdm(days, desc="Computing copula inputs"):
            test_data_day = test_set[test_set['date'] == day]
            z_row = {}

            for symbol in test_data_day['sym_root'].unique():
                try:
                    samples = uv_samples[symbol][day]
                    X_dh = test_data_day[test_data_day['sym_root'] == symbol]['ret_crsp'].values[0]

                    u_dh = np.mean(samples <= X_dh)
                    u_dh = np.clip(u_dh, 1e-6, 1 - 1e-6)

                    # z = norm.ppf(u)
                    Z_dh = np.sqrt(2) * erfinv(2 * u_dh - 1)
                    z_row[symbol] = Z_dh

                except Exception as e:
                    logger.warning(f"Failed to compute Z_d,h for {symbol} on {day}: {e}")
                    continue

            if z_row:
                matrix.append(pd.Series(z_row, name=day))

        df = pd.DataFrame(matrix)
        logger.info(f"Created Gaussian copula input matrix with shape: {df.shape}")
        return df.dropna(axis=1)